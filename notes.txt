

.dstruct my_frame frame 7 arthur_standing_0_layout
test_size_in_my_frame:
  ld a,(my_frame.size)
  ASSERT_A_EQUALS 7
ret
  
  .struct frame
    size db
    layout dw
  .endst

Feature request:
Given an origin y,x and a pointer to a frame, must display frame.
Display frame: Load a number og appropritate sprites (yxc) into SAT.

Arthur standing 0: 7 sprites, >> 1 sprite


  get_sprite:
    ; A = index of sprite in layout
    ; HL = ptr to frame
    push af
      inc hl ; go past size
      call get_address
    pop af
    ld b,3
    call offset_custom_table

  ret


  my_sub:
    ld hl,2
    add hl,sp
    ld a,(hl)
    inc hl
    ld e,(hl)
    inc hl
    ld d,(hl)
    inc hl
    ; results , 2 bytes
    ld a,$12
    ld (hl),a
    inc hl
    ld a,$34
    ld (hl),a
    inc hl
  ret

  my_sub_gets_hl:
    ex de,hl
    ld hl,2
    add hl,sp
    ; results
    ld a,(de)
    ld (hl),a
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc hl
  ret



  jp +
    my_string:
      .db $12, $34, $56, $78, $9A
    my_zero_string:
      .db $00, $00, $00, $00, $00
  +:
  .macro EVALUATE_BYTE_MOVER
    ld hl,-2 ; return address
    add hl,sp
    ld sp,hl
    ld a,\1
    ld hl,\2
    call move_bytes_from_string_to_stack
  .endm

  EVALUATE_BYTE_MOVER 5, my_string
  ASSERT_TOP_OF_STACK_EQUALS_STRING my_string, 5




  jp +
    my_input_1_120_10_1234:
      .db 1, 120, 10
      .dw $1234
  +:
  ld hl,my_input_1_120_10_1234
  call batch_offset
  ASSERT_A_EQUALS 130

  jp +
    my_input_1_120_20_1234:
      .db 1, 120, 20
      .dw $1234
  +:
  ld hl,my_input_1_120_20_1234
  call batch_offset
  ASSERT_A_EQUALS 140

  jp +
    my_input_2_120_20_30_1234:
      .db 2, 120, 20, 30
      .dw $1234
  +:
  ld hl,my_input_2_120_20_30_1234
  call batch_offset
  ASSERT_A_EQUALS 150

  ; Pass 16 bit and 8 bit parameter in stack
  ; And get 16 bit result from subroutine.
  ld hl,-2
  add hl,sp
  ld sp,hl
  ld hl,$1234
  push hl
  ld a,$56
  push af
  inc sp
  call my_sub
  ld hl,3
  add hl,sp
  ld sp,hl
  ASSERT_TOP_OF_STACK_EQUALS $12 $34
  ;pop hl



  ; And get 16 bit result from subroutine.
  jp +
    my_data:
      .db $12, $34
    my_other_data:
      .db $12, $35, $56
  +:
  ld hl,-2
  add hl,sp
  ld sp,hl
  ld hl,my_data
  call my_sub_gets_hl
  ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT 2 my_data

  ld hl,2
  ld a,l
  ASSERT_A_EQUALS 2

  EVALUATE_BYTE_MOVER 3, my_string
  ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT 3 my_string

  EVALUATE_BYTE_MOVER 4, my_zero_string
  ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT 4 my_zero_string


.macro ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT
  ; Parameters: Number of bytes, pointer to expected data. 
  ld de,\2                    ; Comparison string in DE
  ld hl,0                     ; HL points to top of stack.
  add hl,sp       
  .rept \1                    ; Loop through given number of bytes.
    ld a,(hl)                 ; Get byte from stack.
    ld b,a                    ; Store it.
    ld a,(de)                 ; Get comparison byte.
    cp b                      ; Compare byte on stack with comparison byte.
    jp nz,exit_with_failure   ; Fail if not equal.
    inc hl                    ; Point to next byte in stack.
    inc de                    ; Point to next comparison byte.
  .endr
  .rept \1                    ; Clean stack to leave no trace on the system.
    inc sp        
  .endr
.endm



  call test_size_in_my_frame



jp +  
.dstruct my_frame_1 frame 7 layout_1
layout_1:
    .db -24, -8, 1
    .db -24, 0, 2
    .db -16, -8, 3
    .db -16, 0, 4
    .db -8, -8, 5
    .db -8, 0, 6
    .db -32, -8, 7
+:
  ld hl,my_frame_1
  ld a,1 
  call get_sprite
  ASSERT_HL_EQUALS layout_1 + 3



Tests for the legacy animation struct

.org $1234
fake_animation_table:
    .db 7,
    .dw $1234,
    .db 0
    .db 0
    .dw $0123
    .dw $4567

    .db 6,
    .dw $5678,
    .db 0
    .db 0
    .dw $0123
    .dw $4567


dummy_animation:
  .db 4
  .dw $1111
  .db 9
  .db 9
  .dw $0123
  .dw $4567

ctable1:
  ; item 0
  .db 4
  .dw $1111
  .db 9
  .db 9
  .dw $0123
  .dw $4567
  ; item 1
  .db 5
  .dw $2222
  .db 10
  .db 10
  .dw $0123
  .dw $4567



call test_get_animation_0
call test_get_animation_1
call test_macro
call test_offset_custom_table_0_ctable1
call test_offset_custom_table_1_ctable1
call test_set_animation_load_dummy_to_index0
call test_set_animation_load_dummy_to_index1


test_get_animation_0:
  ld a,0
  call get_animation
  ld a,l
  ASSERT_A_EQUALS $34
ret

test_get_animation_1:
  ld a,1
  call get_animation
  ld a,l
  ASSERT_A_EQUALS $34+$9
ret

test_macro:
  ld hl,$1234
  ASSERT_HL_EQUALS $1234
ret

test_offset_custom_table_0_ctable1
  ld a,0
  ld b,9
  ld hl,ctable1
  call offset_custom_table
  ASSERT_HL_EQUALS ctable1
ret

test_offset_custom_table_1_ctable1
  ld a,1
  ld b,9
  ld hl,ctable1
  call offset_custom_table
  ASSERT_HL_EQUALS ctable1+9
  ld a,(hl)
  ASSERT_A_EQUALS 5
ret

test_set_animation_load_dummy_to_index0:
  ld a,0
  ld hl,dummy_animation
  call set_animation
  ld hl,animation_table
  ld a,(hl)
  ASSERT_A_EQUALS 4
ret

test_set_animation_load_dummy_to_index1:
  ld a,1
  ld hl,dummy_animation
  call set_animation
  ld hl,animation_table+9
  ld a,(hl)
  ASSERT_A_EQUALS 4
ret



  jp +
    ; Example offsetting
    ld d,0
    ld e,actor.id
    ld hl,arthur
    add hl,de
  
  +:

Index the animation table:
    ; index with following if not index = 0
    ; ld de,_sizeof_animation
    ; ld hl,animation_table
    ; ld b,a (index)
    ; -:
    ;   add hl,de
    ; djnz -



Vague initial requirement:
Write a library that can handle objects.

1. Add a metasprite to a given y,x