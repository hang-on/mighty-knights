jp +

    xor a
    ld (temp_byte),a

  jp skip_gonzo
      ; gonzo test (kan evt. laves til en std. rythm)
      ld hl,temp_byte
      ld a,(hl)
      cp 192
      jp c,+
        ld a,0
        ld hl,cody_walking_0
        call set_frame
        ld hl,cody_walking_0_tiles_job
        call add_video_job
        jp +++
      +:
      ld a,(temp_byte)
      cp 128
      jp c,+
        ld a,0
        ld hl,cody_walking_1_and_3
        call set_frame
        ld hl,cody_walking_1_and_3_tiles_job
        call add_video_job
        jp +++
      +:
      ld a,(temp_byte)
      cp 64
      jp c,+
        ld a,0
        ld hl,cody_walking_2
        call set_frame
        ld hl,cody_walking_2_tiles_job
        call add_video_job
        jp +++
      +:
        ld a,0
        ld hl,cody_walking_1_and_3
        call set_frame
        ld hl,cody_walking_1_and_3_tiles_job
        call add_video_job    
      +++:
      ld hl,temp_byte
      inc (hl)
      inc (hl)
      inc (hl)
      inc (hl)
      inc (hl)
      inc (hl)
      inc (hl)
      inc (hl)
  skip_gonzo:




  fake_video_job_table: 
    .dw video_job_0
    .dw video_job_1
  fake_video_job_table_index:
    .db 0
  
  .dstruct video_job_0 instanceof video_job 2, multicolor_c, multicolor_c_size, $1234
  .dstruct video_job_1 instanceof video_job 2, multicolor_c, multicolor_c_size, $5678
  
  multicolor_c:
    .db $ff $00 $ff $00
    .db $00 $00 $c0 $c0
    .db $00 $00 $c0 $c0
    .db $00 $00 $c0 $c0
    .db $00 $00 $c0 $c0
    .db $00 $00 $c0 $c0
    .db $00 $00 $c0 $c0
    .db $00 $ff $00 $00
  multicolor_c_size:
    .dw 32
+:



  jp +
    fake_index:
      .db 0
    fake_job_table:
      .dw video_job_0
      .dw video_job_1
  +:
  ld a,(fake_index)
  ld hl,fake_job_table
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS video_job_0

  jp +
    fake_index_1:
      .db 1
    fake_job_table_1:
      .dw video_job_0
      .dw video_job_1
  +:
  ld a,(fake_index_1)
  ld hl,fake_job_table_1
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS video_job_1

  jp +
    .dstruct video_job_2 video_job 2, multicolor_c, multicolor_c_size, $1234
  +:
  RESET_TEST_KERNEL
  ld hl,video_job_2
  call run_video_job
  ld a,(test_kernel_bank)
  ASSERT_A_EQUALS 2
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $1234
  ld hl,test_kernel_bytes_written
  call get_word ;more like get value, or ptr2value16
  ASSERT_HL_EQUALS multicolor_c_size
  ld hl,test_kernel_source
  call get_word
  ASSERT_HL_EQUALS multicolor_c

  jp +
    fake_index_2:
      .db 1
    fake_job_table_2:
      .dw video_job_0
  +:
  RESET_TEST_KERNEL
  ld a,(fake_index_2)
  ld b,a
  -:
    push bc
      ld a,b
      dec a
      ld hl,fake_job_table_2
      call offset_word_table
      call get_word
      call run_video_job
    pop bc
  djnz -
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $1234

  jp +
    fake_video_jobs_3:
      .db 2
    fake_job_table_3:
      .dw video_job_0
      .dw video_job_1
  +:
  RESET_TEST_KERNEL
  ld a,(fake_video_jobs_3)
  ; todo: test if no jobs...
  -:
    push bc
      ld a,b
      ld hl,fake_job_table_3
      call offset_word_table
      call get_word
      call run_video_job
    pop bc
  dec b
  jp nz,-
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $5678

  jp +
    fake_video_jobs_4:
      .db 2
    fake_job_table_4:
      .dw video_job_0
      .dw video_job_1
  +:
  RESET_TEST_KERNEL
  ; load the test data into the correct memory position (set up parameters)...
  ld a,(fake_video_jobs_4)
  ld (video_jobs),a
  ld bc, 4
  ld hl,fake_job_table_4
  ld de,video_job_table
  ldir
  ;
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $5678



  
  ; Test reset test kernel
  RESET_TEST_KERNEL
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $0000


  .macro SETUP_VIDEO_JOB_TEST
    RESET_TEST_KERNEL
    ; Provide number of jobs, and job items in table
    ld a,\1
    ld (video_jobs),a
    ld bc, 2*(NARGS-1)
    jp +
      table_\@:
      .rept NARGS-1
        .shift
        .dw \1  
      .endr
    +:
    ld hl,table_\@
    ld de,video_job_table
    ldir
  .endm

  SETUP_VIDEO_JOB_TEST 2, video_job_0, video_job_1
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $5678

  ; Test no jobs
  SETUP_VIDEO_JOB_TEST 0, video_job_0, video_job_1
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $0000

  ; Test job 1 of two
  SETUP_VIDEO_JOB_TEST 1, video_job_0, video_job_1
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $1234

  jp +
    .dstruct video_job_3 video_job 2, multicolor_c, multicolor_c_size, $1111
  +:

  ; Test job 1 of three
  SETUP_VIDEO_JOB_TEST 1, video_job_0, video_job_1, video_job_3
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $1234

  ; Test job three of three
  SETUP_VIDEO_JOB_TEST 3, video_job_0, video_job_1, video_job_3
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $1111

  ; Test no jobs, but three (old) items on the list
  SETUP_VIDEO_JOB_TEST 0, video_job_0, video_job_1, video_job_3
  call process_video_job_table
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $0000

  ; Full test of last of two jobs, but three (old) items on the list
  SETUP_VIDEO_JOB_TEST 2, video_job_0, video_job_1, video_job_3
  call process_video_job_table
  ld a,(test_kernel_bank)
  ASSERT_A_EQUALS 2
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS $5678
  ld hl,test_kernel_bytes_written
  call get_word ;
  ASSERT_HL_EQUALS multicolor_c_size
  ld hl,test_kernel_source
  call get_word
  ASSERT_HL_EQUALS multicolor_c

  jp +
    .dstruct video_job_4 video_job 2, multicolor_c, multicolor_c_size, $4444
  +:

  ; Test video job table format
  SETUP_VIDEO_JOB_TEST 1, video_job_0
  ld hl,video_job_table
  call get_word
  ASSERT_HL_EQUALS video_job_0

  ; Test video job table format - with three jobs
  SETUP_VIDEO_JOB_TEST 3, video_job_0, video_job_1, video_job_2
  ld a,(video_jobs)
  dec a ; take it back to the last of the existing entries
  ld hl,video_job_table
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS video_job_2

  ; Test add video job - with three jobs
  SETUP_VIDEO_JOB_TEST 3, video_job_0, video_job_1, video_job_2
  ld hl,video_job_4
  call add_video_job

  ld a,(video_jobs)
  dec a ; take it back to the last of the existing entries
  ld hl,video_job_table
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS video_job_4


  ; Test add video job - with 0 jobs but filled table
  SETUP_VIDEO_JOB_TEST 0, video_job_0, video_job_1, video_job_2
  ld hl,video_job_4
  call add_video_job
  ;
  ld a,(video_jobs)
  dec a ; take it back to the last of the existing entries
  ld hl,video_job_table
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS video_job_4

  ; Test add video job - prevent overflow
  SETUP_VIDEO_JOB_TEST 10, video_job_0, video_job_1, video_job_2, video_job_0, video_job_1, video_job_2, video_job_0, video_job_1, video_job_2, video_job_0
  ld hl,video_job_4
  call add_video_job
  ;
  ld a,(video_jobs)
  dec a ; take it back to the last of the existing entries
  ld hl,video_job_table
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS video_job_0

  jp +
    ;.dstruct arthur_standing_0_job video_job 2, arthur_standing_0_tiles, CHARACTER_SIZE*7, SPRITE_BANK_START + CHARACTER_SIZE
  +:
  ; Test add video job - real arthur
  SETUP_VIDEO_JOB_TEST 0
  ld hl,arthur_standing_0_job
  call add_video_job
  ;
  ld a,(video_jobs)
  dec a ; take it back to the last of the existing entries
  ld hl,video_job_table
  call offset_word_table
  call get_word
  ASSERT_HL_EQUALS arthur_standing_0_job

    ; Full test of arthur job
  SETUP_VIDEO_JOB_TEST 1, arthur_standing_0_job
  call process_video_job_table
  ld a,(test_kernel_bank)
  ASSERT_A_EQUALS 2
  ld hl,test_kernel_destination
  call get_word
  ASSERT_HL_EQUALS SPRITE_BANK_START + CHARACTER_SIZE
  ld hl,test_kernel_bytes_written
  call get_word ;
  ASSERT_HL_EQUALS CHARACTER_SIZE*7
  ld hl,test_kernel_source
  call get_word
  ASSERT_HL_EQUALS arthur_standing_0_tiles


    ;ld bc,CHARACTER_SIZE*7
    ;ld de,SPRITE_BANK_START + CHARACTER_SIZE
    ;ld hl,arthur_standing_0_tiles
    ;call load_vram

    ;ld bc,96*CHARACTER_SIZE
    ;ld de,BACKGROUND_BANK_START
    ;ld hl,mockup_background_tiles
    ;call load_vram

    ld bc,VISIBLE_NAME_TABLE_SIZE
    ld de,NAME_TABLE_START
    ld hl,mockup_background_tilemap
    call load_vram





Feature request:
Add a tile loading que.
- Add item to que
- Remove item from que
Que can hold 8 loads (5 actors + 3 misc)
Items are pointers. Items are loads.
Load struct:
  source bank number
  ptr. to source
  bytes to load
  ptr. to destination i vram

  




   
     jp +
  batch_offset_input_0:
    .db 7, -24, -24, -16, -16, -8, -8, -32
  batch_offset_output_0:
    .db  126, 126, 134, 134, 142, 142, 118
  alternating_batch_offset_input_1:
    .db 7, -8, 1, 0, 2, -8, 3, 0, 4, -8, 5, 0, 6, -8, 7 ; pairs
  alternating_batch_offset_output_1:
    .db 142, 1, 150, 2, 142, 3, 150, 4, 142, 5, 150, 6, 142, 7
    ; fix?: let chars be a counter from x to x + size...?
  +:
  dec sp
  dec sp
  ld a,150
  ld hl,batch_offset_input_0
  call batch_offset_to_stack
  ASSERT_TOP_OF_STACK_EQUALS_STRING 7,batch_offset_output_0
  CLEAN_STACK 7

  ld a,150
  ld hl,batch_offset_input_0
  ld de,fake_sat_y
  call batch_offset_to_DE
  ld hl,fake_sat_y
  ASSERT_HL_EQUALS_STRING 7, batch_offset_output_0

  ld a,150
  ld hl,alternating_batch_offset_input_1
  ld de,fake_sat_xc
  call batch_alternating_offset_and_copy_to_DE
  ld hl,fake_sat_xc
  ASSERT_HL_EQUALS_STRING 14, alternating_batch_offset_output_1
   
    ld ix,arthur_twin
    ld iy,arthur_standing_0_frame    ;
    call draw_frame

  arthur_standing_0_y: ; batch format
    .db 7, -24, -24, -16, -16, -8, -8, -32

  arthur_standing_0_xc: ; batch format
    .db  7, -8, 1, 0, 2, -8, 3, 0, 4, -8, 5, 0, 6, -8, 7

  arthur_standing_0_frame: ; batch format
    .dw arthur_standing_0_y, arthur_standing_0_xc


  draw_frame:
    ; Draw an frame frame (metasprite) to SAT buffer.
    ; IN: IX = actor, IY = frame
    ld a,(sat_buffer_index)  
    ld hl,sat_buffer_y
    call offset_byte_table
    ex de,hl
    ld a,(ix+1)
    ld l,(iy+0)
    ld h,(iy+1)
    call batch_offset_to_DE

    ld a,(sat_buffer_index)  
    ld hl,sat_buffer_xc
    call offset_word_table
    ex de,hl
    ld a,(ix+2)
    ld l,(iy+2)
    ld h,(iy+3)
    call batch_alternating_offset_and_copy_to_DE

    ld l,(iy+0)
    ld h,(iy+1)
    ld a,(hl)
    ld b,a
    ld a,(sat_buffer_index)
    add a,b
    ld (sat_buffer_index),a
    ret


; -------------

.dstruct my_frame frame 7 arthur_standing_0_layout
test_size_in_my_frame:
  ld a,(my_frame.size)
  ASSERT_A_EQUALS 7
ret
  
  .struct frame
    size db
    layout dw
  .endst

Feature request:
Given an origin y,x and a pointer to a frame, must display frame.
Display frame: Load a number og appropritate sprites (yxc) into SAT.

Arthur standing 0: 7 sprites, >> 1 sprite


  get_sprite:
    ; A = index of sprite in layout
    ; HL = ptr to frame
    push af
      inc hl ; go past size
      call get_address
    pop af
    ld b,3
    call offset_custom_table

  ret


  my_sub:
    ld hl,2
    add hl,sp
    ld a,(hl)
    inc hl
    ld e,(hl)
    inc hl
    ld d,(hl)
    inc hl
    ; results , 2 bytes
    ld a,$12
    ld (hl),a
    inc hl
    ld a,$34
    ld (hl),a
    inc hl
  ret

  my_sub_gets_hl:
    ex de,hl
    ld hl,2
    add hl,sp
    ; results
    ld a,(de)
    ld (hl),a
    inc de
    inc hl
    ld a,(de)
    ld (hl),a
    inc de
    inc hl
  ret



  jp +
    my_string:
      .db $12, $34, $56, $78, $9A
    my_zero_string:
      .db $00, $00, $00, $00, $00
  +:
  .macro EVALUATE_BYTE_MOVER
    ld hl,-2 ; return address
    add hl,sp
    ld sp,hl
    ld a,\1
    ld hl,\2
    call move_bytes_from_string_to_stack
  .endm

  EVALUATE_BYTE_MOVER 5, my_string
  ASSERT_TOP_OF_STACK_EQUALS_STRING my_string, 5




  jp +
    my_input_1_120_10_1234:
      .db 1, 120, 10
      .dw $1234
  +:
  ld hl,my_input_1_120_10_1234
  call batch_offset
  ASSERT_A_EQUALS 130

  jp +
    my_input_1_120_20_1234:
      .db 1, 120, 20
      .dw $1234
  +:
  ld hl,my_input_1_120_20_1234
  call batch_offset
  ASSERT_A_EQUALS 140

  jp +
    my_input_2_120_20_30_1234:
      .db 2, 120, 20, 30
      .dw $1234
  +:
  ld hl,my_input_2_120_20_30_1234
  call batch_offset
  ASSERT_A_EQUALS 150

  ; Pass 16 bit and 8 bit parameter in stack
  ; And get 16 bit result from subroutine.
  ld hl,-2
  add hl,sp
  ld sp,hl
  ld hl,$1234
  push hl
  ld a,$56
  push af
  inc sp
  call my_sub
  ld hl,3
  add hl,sp
  ld sp,hl
  ASSERT_TOP_OF_STACK_EQUALS $12 $34
  ;pop hl



  ; And get 16 bit result from subroutine.
  jp +
    my_data:
      .db $12, $34
    my_other_data:
      .db $12, $35, $56
  +:
  ld hl,-2
  add hl,sp
  ld sp,hl
  ld hl,my_data
  call my_sub_gets_hl
  ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT 2 my_data

  ld hl,2
  ld a,l
  ASSERT_A_EQUALS 2

  EVALUATE_BYTE_MOVER 3, my_string
  ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT 3 my_string

  EVALUATE_BYTE_MOVER 4, my_zero_string
  ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT 4 my_zero_string


.macro ASSERT_TOP_OF_STACK_EQUALS_BYTES_AT
  ; Parameters: Number of bytes, pointer to expected data. 
  ld de,\2                    ; Comparison string in DE
  ld hl,0                     ; HL points to top of stack.
  add hl,sp       
  .rept \1                    ; Loop through given number of bytes.
    ld a,(hl)                 ; Get byte from stack.
    ld b,a                    ; Store it.
    ld a,(de)                 ; Get comparison byte.
    cp b                      ; Compare byte on stack with comparison byte.
    jp nz,exit_with_failure   ; Fail if not equal.
    inc hl                    ; Point to next byte in stack.
    inc de                    ; Point to next comparison byte.
  .endr
  .rept \1                    ; Clean stack to leave no trace on the system.
    inc sp        
  .endr
.endm



  call test_size_in_my_frame



jp +  
.dstruct my_frame_1 frame 7 layout_1
layout_1:
    .db -24, -8, 1
    .db -24, 0, 2
    .db -16, -8, 3
    .db -16, 0, 4
    .db -8, -8, 5
    .db -8, 0, 6
    .db -32, -8, 7
+:
  ld hl,my_frame_1
  ld a,1 
  call get_sprite
  ASSERT_HL_EQUALS layout_1 + 3



Tests for the legacy animation struct

.org $1234
fake_animation_table:
    .db 7,
    .dw $1234,
    .db 0
    .db 0
    .dw $0123
    .dw $4567

    .db 6,
    .dw $5678,
    .db 0
    .db 0
    .dw $0123
    .dw $4567


dummy_animation:
  .db 4
  .dw $1111
  .db 9
  .db 9
  .dw $0123
  .dw $4567

ctable1:
  ; item 0
  .db 4
  .dw $1111
  .db 9
  .db 9
  .dw $0123
  .dw $4567
  ; item 1
  .db 5
  .dw $2222
  .db 10
  .db 10
  .dw $0123
  .dw $4567



call test_get_animation_0
call test_get_animation_1
call test_macro
call test_offset_custom_table_0_ctable1
call test_offset_custom_table_1_ctable1
call test_set_animation_load_dummy_to_index0
call test_set_animation_load_dummy_to_index1


test_get_animation_0:
  ld a,0
  call get_animation
  ld a,l
  ASSERT_A_EQUALS $34
ret

test_get_animation_1:
  ld a,1
  call get_animation
  ld a,l
  ASSERT_A_EQUALS $34+$9
ret

test_macro:
  ld hl,$1234
  ASSERT_HL_EQUALS $1234
ret

test_offset_custom_table_0_ctable1
  ld a,0
  ld b,9
  ld hl,ctable1
  call offset_custom_table
  ASSERT_HL_EQUALS ctable1
ret

test_offset_custom_table_1_ctable1
  ld a,1
  ld b,9
  ld hl,ctable1
  call offset_custom_table
  ASSERT_HL_EQUALS ctable1+9
  ld a,(hl)
  ASSERT_A_EQUALS 5
ret

test_set_animation_load_dummy_to_index0:
  ld a,0
  ld hl,dummy_animation
  call set_animation
  ld hl,animation_table
  ld a,(hl)
  ASSERT_A_EQUALS 4
ret

test_set_animation_load_dummy_to_index1:
  ld a,1
  ld hl,dummy_animation
  call set_animation
  ld hl,animation_table+9
  ld a,(hl)
  ASSERT_A_EQUALS 4
ret



  jp +
    ; Example offsetting
    ld d,0
    ld e,actor.id
    ld hl,arthur
    add hl,de
  
  +:

Index the animation table:
    ; index with following if not index = 0
    ; ld de,_sizeof_animation
    ; ld hl,animation_table
    ; ld b,a (index)
    ; -:
    ;   add hl,de
    ; djnz -



Vague initial requirement:
Write a library that can handle objects.

1. Add a metasprite to a given y,x